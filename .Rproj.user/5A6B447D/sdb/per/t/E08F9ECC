{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to data wrangling and visualisation with R\"\nauthor: \"Dan Olner\"\noutput: pdf_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, fig.align = 'center')\n#Fig align not supported for word output. We can look at PDF output...?\n#knitr::opts_chunk$set(echo = TRUE)\n#opts_chunk$set(fig.align='center') \n#knitr::opts_chunk$set(fig.align='center') \n```\n\n```{r echo = F}\n#Preload libraries for myself\nlibrary(readr)\n#for resizing images\n#http://stackoverflow.com/questions/15625990/how-to-set-size-for-local-image-using-knitr-for-markdown\nlibrary(png)\nlibrary(grid)\n\n```\n\n\n# Introduction\n\nThis workshop aims to get you from the basics of data manipulation in R through to putting that data into visualisations. We'll do this by working through one typical scenario: loading some data in CSV (Comma-Separated variable) form, processing it in various ways until it meets our goals, and then using R to look at it with visualisations.\n\nWe can only cover the basics in one day, but it will hopefully provide a foundation. You'll be introduced to various sources along the way for information on next steps.\n\n\n## Our data for the day: Land registry 'price paid' data on house prices in England\n\n\nAll of the data for the workshop is open access: you can download it yourself for free. I've provided links and notes at the end of this document for that.\n\n\n\n## Random bits\n\n\n* **Learning some keyboard shortcuts helps massively**. You don't have to use them but, once learned, they're hugely useful in R-Studio. I'll explain them as we go along. I've also included a **keyboard shortcut sheet** for the ones you might want to use today.\n* **There is always more than one way to do things in R** - and can they can be confusingly different.\n* We'll be covering a lot of ground, some with pretty fiddly little details. **Don't worry if it doesn't all go in your head today**. But try and find time after the course to run through it again.\n* Thing about working on your own problem - that's when learning to program happens \n\n\n\n\n\n\n\n\n\n# R-Studio\n\n##A first look at RStudio\n\n**RStudio** is a self-contained environment for doing everything in R. As we'll see throughout the day, it does a heap of different things to make programming in R as painless as possible.\n\nFirst thing - let's open it and have a look at what's there. You should see the following:\n\n**Do screenprint at work**\n\nYou can see the following:\n\n* The **console pane** where we can enter commands and run them immediately.\n* The **environment pane**: all our data and variables will appear here.\n* A pane with a number of tabs, currently open on **files**. When we first produce graphics, these will appear here in the **plots** pane.\n\n## Entering commands in R\n\nBefore we do anything else, let's get a feel for how to enter commands in R. \n\nWe'll use the **console** to do this. The console will execute anything we put here as soon as you press enter.\n\nR will return anything you put in. Try some of these or something different just to get a feel for it, pressing enter after each. Any maths will be evaluated and returned.\n\n```{r eval = F}\n80\n80+20\n80*20\n80/20\n'This is some text'\nsqrt(100)\n```\n\nThat last one - **sqrt(100)** - is a **function**. Functions are in/out machines: in this case, stick 100 in and get its square root out. Anything you put inside brackets in R is going into a function. You can stick anything in there that will evaluate, so we could also have done:\n\n```{r}\nsqrt(55+45)\nsqrt(sqrt(100))\n```\n\n## Assigning to variables\n\nEverything, whether it's a single number, a list of numbers, a piece of text, an entire dataset or a graph, can be assigned to a variable. \n\nVariable names should be a balance between brevity and clarity: you want it to say something that will make sense to you when returning to the code a month later, but it also needs to be typeable. (Although on that point, as we'll see, RStudio removes a lot of the pain of typing for us.)\n\nHere's some examples to try in the console.\n\n******\nR's assignment operator is a 'less than' followed by a minus. Typing both of these the whole time can be a pain - **so RStudio has a handy shortcut key**:\n\n* **ALT + 'minus' (one to the right of zero)**\n\nHave a go at using this shortcut key when assigning the examples below.\n\n******\n\n```{r}\ncity <- 'London'\n\nmax <- 150\nmin <- 45\nrange <- max - min\n\n```\n\nYou'll see when assigning to variable names in the console, it doesn't automatically output what's just been assigned. You will, however, see them appear in the **environment pane** on the right: your new variables are there, under 'values'.\n\n```{r fig.width=4, fig.height=2.5, echo=FALSE}\nimg <- readPNG(\"images/valuesinpane.png\")\n grid.raster(img)\n```\n\nYou can also see the assignments and results by typing the variable names, as we were doing with simple values before: \n\n```{r}\ncity\nmin\nmax\nrange\n```\n\nWe'll get on to putting all this into a reusable script in a moment.\n\n## Opening today's project in RStudio\n\nRStudio **projects** are self-contained folders that keep everything for a particular project together in one place. \n\nYou've each got a USB data stick - this contains everything for today. Once you've opened RStudio, the first thing to do is **open the project directly from the USB stick**. By doing this, all of your work today will be saved to the stick and you can take it away with you.\n\nAccess RStudio's project loading dialogue in the top right. It should currently just say 'project (none)':\n\nClick to get a range of project options. You can tell RStudio that an existing folder should become a project - but we're opening an existing one, so choose *open project*:\n\n```{r fig.width=4, fig.height=2.5, echo=FALSE}\nimg <- readPNG(\"images/openproject.png\")\n grid.raster(img)\n```\n\nNavigate to the data stick, open the folder and double-click the *.Rproj* file.\n\nYou may not immediately see much change - but now the whole workspace will be saved as a whole and, as we'll see below, it makes various other things easier to work with. Note that, in the top right, you can now see the project name.\n\n## A new script\n\nWe'll program all of today's work into a single script file in RStudio. To get a blank script to start with, go to:\n\n* **File / new file / new R-script**\n\n> **Note how the menus tell you what shortcut key to use for a lot of actions. In this case we can see *Ctrl+Shift+N* will also create a new script.**\n\nThe script opens in a new pane above the console. Currently it's just **Untitled1** - we'll save it in a moment when we've added something to it.\n\n*******\nIf you're coming back to this later or lose the datastick, or are running through the workshop on your own, the project can also be downloaded from either of these:\n\n* Clone this Github page: \n* Download and unpack this zip file: \n\n*******\n\n\n##But will it make sense in two month's time...? Using comments and sections\n\nCode you write today may not make the slightest bit of sense in four weeks' time. This happens to all programmers. So it's **absolutely essential** to take some steps to make life easier for yourself by making sure the code is readable and clear. Leave plenty of space in your code wherever you can for a start.\n\nBut the most essential way to make sure it makes sense:\n\n* **Comment all your code clearly**\n* Don't ever say to yourself, 'oh, this will make sense later'.\n* So **comment all your code clearly!**\n\nR uses the **#hash symbol** for comments. So for our playing with assignment above, we could add a comment or two thus:\n\n```{r eval=F}\n#Using the assignment operator\ncity <- 'London'\n\nmax <- 150\nmin <- 45\n\n#Finding the range by substracting max from min\nrange <- max - min\n\n```\n\nRStudio also provides a hugely useful comment feature:\n\n* Adding four dashes to the end of a comment **automatically makes it a section**\n\nTry it - add four dashes to that first comment:\n\n```{r eval=F}\n#Using the assignment operator----\n```\n\nAs you add the dash, you'll see a little down-pointing triangle appear on the left. Also, at the bottom of the scripting window, the same phrase should have appeared. Once we add more sections, you can click in that area to move between them.\n\n* Shortcut key tip: **ALT + SHIFT + J brings up the section menu without having to click on it.** (At the moment we've only got one section, mind.)\n\nSome people also like to make their sections more visibly distinct by doing something like the comment below. It's a matter of personal taste - whatever helps you keep your code clear.\n\n```{r eval=F}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#Using the assignment operator----\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nWe'll look at a few other keeping-things-readable ideas as we go through the day.\n\n## It's all about the libraries\n\nCommands already built into R are known as the **base commands**. But all the really awesome stuff in R comes from libraries. If there's something you think you need to do in R, someone has most probably already built a library to do it.\n\nFor today's workshop, we'll be (mostly) using a set of libraries developed by one person: **Hadley Wickham**. Hadley's designed these libraries with an underlying data philosophy - *'[tidy data](http://vita.had.co.nz/papers/tidy-data.pdf)'* - so that as much as possible there is one clean, standardised way of doing things. \n\nWe'll use these libraries to get us from loading and organising data right through to visualising it in the **ggplot** library.\n\nIf a library isn't already installed, you can install it with the following. (This is the first library we'll be using, in the next section.) **Do this in the console, not in your script, as it only needs running once.**\n\n```{r eval=F}\ninstall.packages('readr')\n```\n\nOnce the library is installed, you can load it ready for use with the following. **This time, put this right at the top of your script, before everything else** as you'll want to load these libraries every time you come back to the script. We'll add more libraries there shortly.\n\n```{r eval=F}\nlibrary(readr)\n```\n\nNotice, just to be awkward, that when **installing** libraries, the name needs to be in quotes but when **loading** it, it's not.\n\nAs we'll see shortly, readr gives us a nicer way of loading CSVs than base R provides.\n\n## Loading a file into a dataframe and examining the data\n\nWe'll be keeping all of our data in **dataframes**. The easiest way to understand these is just to look at one. Your project folder has a sub-folder called *data*. All of the data you'll use today is in there. Let's load an **example dataframe** to play with. Loading it from a CSV file looks like this:\n\n\n```{r eval = F}\ndf <- read_csv('data/averagePropertyPrices.csv')\n```\n\n******\nBecause we're using an RStudio project, we don't have to worry about where the working directory is: **RStudio sets it automatically to our project folder.** As long as we're working in that folder, there's no need to mess around with the full path to the file. (It also allows us to move RStudio projects and give them easily to other people to use.)\n\n******\n\nThe **read_csv** command (from the readr package) loads the CSV data, turns it into a **dataframe** and assigns it to our variable name, **df**. We can now use **df** to work with the data.\n\nAs with our last assignments, the dataframe also appears on the right under *data*, telling us there are *166 observations* and *3 variables*.\n\nWe can look directly at this data in a few ways. A really useful one is this:\n\n* Click either on the little table symbol in the environment pane or just on the variable name itself. **This opens the dataframe in its own tab**. You can scroll through the data. \n\nWe can also peek at the data using script. These two commands will show you the top and bottom few values. (This is the kind of quick looking at data that the console is good for.)\n\n```{r eval = F}\nhead(df)\ntail(df)\n```\n\n\n\n\n\n\n\n# Getting our housing data\n\nOK, let's get stuck in to the data we're going to use. As well as the little example dataframe we just looked at, your *data* folder contains the following three CSVs:\n\n* land registry price data **for a city or town** in England (you've all got a different one)\n* land registry price data **for London**\n* A postcode 'lookup file'. We'll use this to find out which properties are in which wards with each city.\n\nThen some other text because that seems to make the padding better.\n\n\n\n```{r eval=F}\n\nlandRegistry$date_formatted <- \n  as.Date(landRegistry$date, format = '%Y-%m-%d')\n\nlandRegistry$year <- year(landRegistry$date_formatted)\n\n```\n\nWhat's going on with *as.Date*? If you look at the format of the date in your land registry data, you'll see it's e.g. **'2003-09-19'**. So it's format is: **'year-month-day'**. The as.Date function tells R this is text that's in this date format, so it can convert to something it understands as a date. If we were using the more common English date format of **'day-month-year'**, you'd tell R this with **format = '%d-%m-%Y'**.\n\nJust a couple of other date-formatting things to note. \n\n* First: if the date was **'2003/09/19'** (i.e. the numbers are separated by **slashes** instead of **dashes**) you'd just tell R the separators are slashes, like this: **format = '%d/%m/%Y'**. \n* Second: the year marker is a capital to indicate the full year is used - **'2003'**, not **'03'**. If the date used the shorter year version, you'd just use a lower-case **y**.\n\n\n\n\n#Data sources\n\nThe original data used in the workshop can be downloaded here:\n\n* Land registry 'price paid' data: \n* 'Code-point open' postcode data containing geolocations for each postcode: \n\n\nNote: it's not in the same form we used today. I've done a bunch of pre-wrangling to it, to focus on the essentials of getting to know R. If you're interested in knowing how the original data got into the form used in the workshop, the original source code is here:\n\n\n\nReading the comments in that source code might be useful: it should be apparent how messy actual data wrangling usually is, how many things go wrong and new directions need to be taken.\n\n\n\n\n\n",
    "created" : 1479381510111.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2867071977",
    "id" : "E08F9ECC",
    "lastKnownWriteTime" : 1479384484,
    "last_content_update" : 1479384484112,
    "path" : "C:/Users/admin/Dropbox/SheffieldMethodsInstitute/Training/Intro_to_R_Nov2016/Introduction2Wrangling_n_Viz_R/RMarkdown/r_course_markdown.Rmd",
    "project_path" : "RMarkdown/r_course_markdown.Rmd",
    "properties" : {
        "docOutlineVisible" : "0",
        "source_window_id" : ""
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}